/** Parseable but unsupported TypeScript versions. */
export type UnsupportedTypeScriptVersion = (typeof TypeScriptVersion.unsupported)[number];
/**
 * Parseable and supported TypeScript versions.
 * Only add to this list if we will support this version on Definitely Typed.
 */
export type TypeScriptVersion = (typeof TypeScriptVersion.supported)[number];
export type AllTypeScriptVersion = UnsupportedTypeScriptVersion | TypeScriptVersion;
export declare namespace TypeScriptVersion {
    /** Add to this list when a version actually ships.  */
    const shipped: readonly ["4.8", "4.9", "5.0", "5.1", "5.2", "5.3", "5.4", "5.5"];
    /** Add to this list when a version is available as typescript@next */
    const supported: readonly ["4.8", "4.9", "5.0", "5.1", "5.2", "5.3", "5.4", "5.5", "5.6"];
    /** Add to this list when it will no longer be supported on Definitely Typed */
    const unsupported: readonly ["2.0", "2.1", "2.2", "2.3", "2.4", "2.5", "2.6", "2.7", "2.8", "2.9", "3.0", "3.1", "3.2", "3.3", "3.4", "3.5", "3.6", "3.7", "3.8", "3.9", "4.0", "4.1", "4.2", "4.3", "4.4", "4.5", "4.6", "4.7"];
    const all: readonly AllTypeScriptVersion[];
    const lowest: "4.8";
    /** Latest version that may be specified in a `// TypeScript Version:` header. */
    const latest: "4.8" | "4.9" | "5.0" | "5.1" | "5.2" | "5.3" | "5.4" | "5.5" | "5.6";
    function isSupported(v: AllTypeScriptVersion): v is TypeScriptVersion;
    function range(min: TypeScriptVersion): readonly TypeScriptVersion[];
    /** List of NPM tags that should be changed to point to the latest version. */
    function tagsToUpdate(v: TypeScriptVersion): readonly string[];
    function previous(v: TypeScriptVersion): TypeScriptVersion | undefined;
    function next(v: TypeScriptVersion): TypeScriptVersion | undefined;
    function isRedirectable(v: AllTypeScriptVersion): boolean;
    function isTypeScriptVersion(str: string): str is AllTypeScriptVersion;
}
